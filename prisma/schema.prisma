// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String        @db.VarChar(250)
  role         Role          @default(STUDENT)
  profile      Profile?
  cohortId     Int?
  cohort       Cohort?       @relation(fields: [cohortId], references: [id])
  posts        Post[]
  deliveryLogs DeliveryLog[]
  comments     Comment[]
  likes        Like[]
  commentLikes CommentLike[]
}

model Profile {
  id              Int        @id @default(autoincrement())
  userId          Int        @unique
  user            User       @relation(fields: [userId], references: [id])
  firstName       String
  lastName        String
  bio             String?
  githubUrl       String?
  profileImageUrl String?    @default("https://www.pngfind.com/pngs/m/676-6764065_default-profile-picture-transparent-hd-png-download.png")
  visibility      Visibility @default(PUBLIC)
}

model Cohort {
  id           Int           @id @default(autoincrement())
  users        User[]
  deliveryLogs DeliveryLog[]
  name         String?       @unique
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  likes     Like[]
  comments  Comment[]
  isPrivate Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model DeliveryLog {
  id       Int               @id @default(autoincrement())
  date     DateTime?         @default(now())
  userId   Int
  user     User              @relation(fields: [userId], references: [id])
  cohortId Int
  cohort   Cohort            @relation(fields: [cohortId], references: [id])
  lines    DeliveryLogLine[]
}

model DeliveryLogLine {
  id      Int         @id @default(autoincrement())
  content String
  logId   Int
  log     DeliveryLog @relation(fields: [logId], references: [id], onDelete: Cascade)
}

model Comment {
  id      Int           @id @default(autoincrement())
  content String        @db.VarChar(150)
  userId  Int
  user    User          @relation(fields: [userId], references: [id])
  postId  Int
  post    Post          @relation(fields: [postId], references: [id])
  likes   CommentLike[]

  parentId Int?
  parent   Comment?  @relation("replies", fields: [parentId], references: [id])
  replies  Comment[] @relation("replies")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Like {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
}

model CommentLike {
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}
